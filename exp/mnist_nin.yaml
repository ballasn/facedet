!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1,
        axes: ['c', 0, 1, 'b'],
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: 0,
                     num_channels: 96,
                     num_pieces: 1,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .05,
                     max_kernel_norm: .9,
                     min_zero: True,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'nin0',
                     num_channels: 16,
                     num_pieces: 1,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .05,
                     min_zero: True,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     num_channels: 96,
                     pad: 3,
                     num_pieces: 1,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .05,
                     min_zero: True,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'nin1',
                     num_channels: 16,
                     num_pieces: 1,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .05,
                     min_zero: True,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     pad: 3,
                     layer_name: 'h2',
                     num_channels: 96,
                     num_pieces: 1,
                     kernel_shape: [5, 5],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .05,
                     min_zero: True,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'nin2',
                     num_channels: 16,
                     num_pieces: 1,
                     kernel_shape: [1, 1],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .05,
                     min_zero: True,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [28, 28],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5,
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              axes: ['c', 0, 1, 'b'],
                              which_set: 'train',
                              one_hot: 1,
                              start: 50000,
                              stop:  60000
                          },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8, 'nin0': 1.,  'nin1': 1., 'nin2': 1. },
            input_scales: { 'h0': 1.,  'nin0': 1.,  'nin1': 1., 'nin2': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
    #     update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
    #         decay_factor: 1.00004,
    #         min_lr: .000001
    #     }
     },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_DIR}mnist_nin_best2.pkl"
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "mnist_nin2.pkl",
    save_freq: 1,
}
