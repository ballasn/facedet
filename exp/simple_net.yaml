!obj:pylearn2.train.Train {
    dataset: &train !obj:faceDataset.faceDataset {
        which_set: 'train',
        positive_samples: "/data/lisatmp3/chassang/facedet/16/pos16_100_eq.npy",
        negative_samples: "/data/lisatmp3/chassang/facedet/16/neg16_100_eq.npy",
        axes: ['c', 0, 1, 'b']
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
                layers: [
                 #!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                 #    layer_name: 'h0',
                 #    output_channels: 32,
                 #    kernel_shape: [4, 4],
                 #    pool_shape: [3, 3],
                 #    pool_stride: [1, 1],
                 #    irange: .0005,
                 #    max_kernel_norm: 3.9,
                 #},
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h1',
                     output_channels: 48,
                     kernel_shape: [6, 6],
                     pool_shape: [2, 2],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: 7.9,
                 },
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'r2',
                     left_slope: 0,
                     dim: 20,
                     irange: 0.5
                 },
                 !obj:SoftmaxRecall.SoftmaxRecall {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 2,
                     irange: .05,
                     thresholds: [0.25, 0.4]
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [16, 16],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .000001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.1,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:faceDataset.faceDataset {
                        which_set: 'valid',
                        positive_samples: "/data/lisatmp3/chassang/facedet/16/pos16_100_eq.npy",
                        negative_samples: "/data/lisatmp3/chassang/facedet/16/neg16_100_eq.npy",
                        axes: ['c', 0, 1, 'b'],
                      },
            },
       # cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
       #     input_include_probs: { 'h0' : .8 },
       #     input_scales: { 'h0': 1. }
       # },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 150,
            new_epochs: True
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                 channel_name: 'valid_y_misclass',
                 save_path: "/data/lisatmp3/chassang/facedet/simple_best_model.pkl"
            }
    ],
    save_path: "./100k_simple/20d_05pre.pkl",
    save_freq: 5
}
