!obj:pylearn2.train.Train {
    dataset: &train !obj:faceDataset.faceDataset {
        which_set: 'train',
        positive_samples: "/data/lisatmp3/chassang/facedet/positives_eq.npy",
        negative_samples: "/data/lisatmp3/chassang/facedet/negatives_eq.npy",
        axes: ['c', 0, 1, 'b']
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
        ## The size of filters is originally 11x11x3
        # Check how to take the 3 colours as input
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'c1',
                     pad: 0,
                     num_channels: 32,
                     num_pieces: 1,
                     kernel_shape: [11,11],
                     pool_shape: [3, 3],
                     pool_stride: [1, 1],
                     irange: .0005,
                     max_kernel_norm: 7.9,
                 },
        ## No maxout for the second one
        # 
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'c3',
                     output_channels: 16,
                     kernel_shape: [9, 9],
                     pool_shape: [1, 1],
                     pool_stride: [1, 1],
                     irange: .005,
                     max_kernel_norm: 1.9365,
                 },
         # Locally connected layers
                 !obj:pylearn2.models.maxout.MaxoutLocalC01B {
                     layer_name: 'l4',
                     kernel_shape: [9, 9],
                     kernel_stride: [1, 1],
                     num_channels: 16,
                     num_pieces: 1,
                     irange: .01
                 },
                 !obj:pylearn2.models.maxout.MaxoutLocalC01B {
                     layer_name: 'l5',
                     kernel_shape: [7, 7],
                     kernel_stride: [1, 1],
                     num_channels: 16,
                     num_pieces: 1,
                     irange: .01
                 },
                 !obj:pylearn2.models.maxout.MaxoutLocalC01B {
                     layer_name: 'l6',
                     kernel_shape: [5, 5],
                     kernel_stride: [1, 1],
                     num_channels: 16,
                     num_pieces: 1,
                     irange: .01
                 },
          # Fully connected layers
                 !obj:pylearn2.models.mlp.Sigmoid {
                     layer_name: 'f7',
                     dim: 40,
                     max_col_norm: 1.9365,
                     irange: .01
                 },
                 !obj:pylearn2.models.mlp.Sigmoid {
                     layer_name: 'f8',
                     dim: 30,
                     max_col_norm: 1.9365,
                     irange: .01,
                 },
          # And a final softmax classifier
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 2,
                     irange: .0005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .0001,
        
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.05,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:faceDataset.faceDataset {
                        which_set: 'valid',
                        positive_samples: '/data/lisatmp3/chassang/facedet/pos10000.npy',
                        negative_samples: '/data/lisatmp3/chassang/facedet/neg10000.npy',
                        axes: ['c', 0, 1, 'b'],
                      },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'c1' : .8 },
            input_scales: { 'c3': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 1000
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                 channel_name: 'valid_y_misclass',
                 save_path: "/data/lisatmp3/chassang/facedet/3layer_best_model.pkl"
            }
    ],
    save_path: "facedataset_conv2d_2307.pkl",
    save_freq: 5
}
