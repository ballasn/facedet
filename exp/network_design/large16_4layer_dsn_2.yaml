!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.faceDataset.faceDataset {
        which_set: 'train',
        ratio: 0.9,
        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
        #negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/googleemotion/neg100_good_shuffled.npy",
        mean: '/data/lisatmp3/ballasn/facedet/datasets/aflw/mean_16google.npy',
      #  resize_neg: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
                layers: [
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c0',
                     output_channels: 128,
                     kernel_shape: [3, 3],
                     pool_type: 'max',
                     pool_shape: [2,2],
                     pool_stride: [2,2],
                     irange: .005,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'nin0',
                     output_channels: 128,
                     kernel_shape: [1, 1],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c1',
                     output_channels: 512,
                     kernel_shape: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'nin1',
                     output_channels: 128,
                     kernel_shape: [1, 1],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                  !obj:models.layer.convVariable.ConvElemwise {
                      layer_name: 'c3',
                      output_channels: 512,
                      kernel_shape: [2, 2],
                      irange: .05,
                      max_kernel_norm: .9,
                      nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                      tied_b: 1
                  },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'nin2',
                     output_channels: 128,
                     kernel_shape: [1, 1],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                  !obj:models.layer.convVariable.ConvElemwise {
                       # W_lr_scale: 0.2,
                       # b_lr_scale: 0.2,
                       layer_name: 'c4',
                       output_channels: 512,
                       kernel_shape: [2, 2],
                       irange: .05,
                       max_kernel_norm: .9,
                       nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                       tied_b: 1
                  },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'nin3',
                     output_channels: 128,
                     kernel_shape: [1, 1],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                      layer_name: 'Sw',
                      output_channels: 2,
                      kernel_shape: [4, 4],
                      irange: .005,
                      max_kernel_norm: 1.2,
                      nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                      tied_b: 1
                  },
                  !obj:models.layer.SoftmaxBC01Extended.SoftmaxExtended {
                       #max_col_norm: 1.9365,
                       layer_name: 'y',
                       n_classes: 2,
                       irange: .005,
                       thresholds: [0.2, 0.4]
                   }
                 # !obj:pylearn2.models.mlp.Softmax {
                 #     #max_col_norm: 1.9365,
                 #     layer_name: 'y',
                 #     n_classes: 2,
                 #     irange: .005,
                 #     max_col_norm: 4.
                 # }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [16, 16],
            num_channels: 3,
            axes: ['b', 'c', 0, 1],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum        {
            init_momentum: 0.01,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:datasets.faceDataset.faceDataset {
                        which_set: 'valid',
                        ratio: 0.9,
                        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
                        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
                        mean: '/data/lisatmp3/ballasn/facedet/datasets/aflw/mean_16pascal.npy',
                      },
            },
         # cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
         #     input_include_probs: { 'c0': 1., 'c1': 1., 'c2': 1.,
         #                            'c3': .5, 'c4': 1.0, 'y': 1.0},
         #     input_scales: { 'c0': 1., 'c1': 1., 'c2': 1.,
         #                     'c3': 2., 'c4': 1., 'y': 1.}
         # },
        cost: !obj:pylearn2.costs.mlp.dsn.DSN {
            companion: {
                        'nin0': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin0y',
                                              n_classes: 2,
#                                              C: 0.01,
                                              irange: .005 },
                        'nin1': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin1y',
                                              n_classes: 2,
 #                                             C: 0.01,
                                              irange: .005 },
                        'nin2': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin0y',
                                              n_classes: 2,
#                                              C: 0.01,
                                              irange: .005 },
                        'nin3': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin1y',
                                              n_classes: 2,
 #                                             C: 0.01,
                                              irange: .005 },
                       },
            companion_weight: {'nin0': 0.3, 'nin1': 0.5,
                               'nin2': 0.3, 'nin3': 0.5},
         },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter         {
            max_epochs: 1000,
            new_epochs: True
        },
     update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
             decay_factor: 1.00004,
             min_lr: .000001
         },
     },
    extensions: [
        # !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
        #      start: 5,
        #      saturate: 60,
        #      decay_factor: 0.01
        # },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 5,
            saturate: 250,
            final_momentum: .9
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                channel_name: 'valid_y_misclass',
                save_path: "./models/large16_best_dsn_2.pkl"
        }
    ],
    save_path: "./models/large16_dsn_2.pkl",
    save_freq: 5
}
