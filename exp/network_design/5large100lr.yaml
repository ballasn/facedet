!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.faceDataset_hdf5.faceDataset {
    #dataset: &train !obj:datasets.faceDataset.faceDataset {
                which_set: 'train',
                        ratio: 0.9,
                        positive_samples: "/part/02/Tmp/ballasn/facedet/96/pos96_norsz.hdf",
                        negative_samples: "/part/02/Tmp/ballasn/facedet/96/imagenet96.hdf",
                        #positive_samples: "/part/02/Tmp/ballasn/facedet/96/feats96.npy",
                        #negative_samples: "/part/02/Tmp/ballasn/facedet/96/neg100000_96_filt.npy",
#                        resize_neg: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
                layers: [
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c0',
                     output_channels: 64,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     pool_type: 'max',
                     pool_shape: [2,2],
                     pool_stride: [2,2],
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c0n',
                     output_channels: 64,
                     kernel_shape: [1, 1],
                     irange: .1,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c1',
                     output_channels: 128,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c1n',
                     output_channels: 64,
                     kernel_shape: [1, 1],
                     irange: .1,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c2',
                     output_channels: 256,
                     kernel_shape: [2, 2],
                     pool_type: 'max',
                     pool_shape: [2,2],
                     pool_stride: [2,2],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c2n',
                     output_channels: 128,
                     kernel_shape: [1, 1],
                     irange: .1,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c3',
                     output_channels: 512,
                     kernel_shape: [3, 3],
                     pool_type: 'max',
                     pool_shape: [2,2],
                     pool_stride: [2,2],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c3n',
                     output_channels: 256,
                     kernel_shape: [1, 1],
                     irange: .1,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c4',
                     output_channels: 1024,
                     kernel_shape: [3, 3],
                     pool_type: 'max',
                     pool_shape: [2,2],
                     pool_stride: [2,2],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c4n',
                     output_channels: 512,
                     kernel_shape: [1, 1],
                     irange: .1,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'out',
                     output_channels: 2,
                     kernel_shape: [4,4],
                     irange: .05,
                     max_kernel_norm: 7.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1,

                 },
                 !obj:models.layer.SigmoidBC01Extended.SigmoidExtended {
                     layer_name: 'y',
                     n_classes: 2,
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [96, 96],
            num_channels: 3,
            axes: ['b', 'c', 0, 1],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
        init_momentum: 0.3,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                #'train': *train,
                'aflw' : !obj:datasets.faceDataset.faceDataset {
                        which_set: 'valid',
                        positive_samples: "/part/02/Tmp/ballasn/facedet/96/feats96.npy",
                        negative_samples: "/part/02/Tmp/ballasn/facedet/96/neg100000_96_filt.npy",
                        resize_neg: True,
                        },
               'valid': !obj:datasets.faceDataset_hdf5.faceDataset {
                        # !obj:datasets.faceDataset.faceDataset {
                      which_set: 'valid',
                      ratio: 0.9,
                      positive_samples: "/part/02/Tmp/ballasn/facedet/96_2/pos96_norsz.hdf",
                      negative_samples: "/part/02/Tmp/ballasn/facedet/96_2/imagenet96.hdf",
    },
            },
        cost: !obj:costs.mlp.dsn.DSN_dropout {
            companion: {
                        '0n': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin0y',
                                              n_classes: 2,
#                                              C: 0.01,
                                              irange: .005 },
                        '1n': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin1y',
                                              n_classes: 2,
 #                                             C: 0.01,
                                              irange: .005 },
                       },
            companion_weight: {'0n': 0.3, '1n': 0.3},
            default_input_include_prob: 1.0,
            default_input_scale: 1.0,
            input_include_probs: {'c4': 0.5},
            input_scales: {'c4': 2},
         },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 1000,
            new_epochs: True
        },
    },
    extensions: [
         !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
              start: 10,
              saturate: 65,
              decay_factor: 0.01
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 10,
            saturate: 60,
            final_momentum: .9
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                channel_name: 'aflw_y_misclass',
                save_path: "models/${PYLEARN2_TRAIN_FILE_STEM}_best.pkl"
            }
    ],
    save_path: "models/${PYLEARN2_TRAIN_FILE_STEM}.pkl",
    save_freq: 1
}
