!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.faceDataset.faceDataset {
        which_set: 'train',
        ratio: 0.9,
        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
        resize_neg: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
                layers: [
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c0',
                     output_channels: 32,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c1',
                     output_channels: 64,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c2',
                     output_channels: 64,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c3',
                     output_channels: 64,
                     kernel_shape: [3, 3],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c4',
                     output_channels: 64,
                     kernel_shape: [2, 2],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },

                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c5',
                     output_channels: 64,
                     kernel_shape: [2, 2],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c6',
                     output_channels: 64,
                     kernel_shape: [2, 2],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'c7',
                     output_channels: 64,
                     kernel_shape: [2, 2],
                     irange: .05,
                     max_kernel_norm: .9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'Sw',
                     output_channels: 2,
                     kernel_shape: [4, 4],
                     irange: .05,
                     max_kernel_norm: 1.9365,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.SoftmaxBC01Extended.SoftmaxExtended {
                     layer_name: 'y',
                     n_classes: 2,
                     irange: .5,
                     thresholds: []
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [16, 16],
            num_channels: 3,
            axes: ['b', 'c', 0, 1],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.1,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        #monitoring_dataset:
        #    {
        #        'train' : *train,
        #        'valid' : !obj:datasets.faceDataset.faceDataset {
        #                which_set: 'valid',
        #                ratio: 0.9,
        #                positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
        #                negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
        #                #resize_neg: True,
        #                #mean: '/u/romerosa/Projects/facedet/exp/convtest/16/mean_16.npy'
        #              },
        #    },
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:datasets.faceDataset.faceDataset {
                        which_set: 'valid',
                        ratio: 0.9,
                        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
                        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
                      },
            },
        cost: !obj:costs.mlp.dsn.DSN {
            companion: {
                        'c0': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin0y',
                                              n_classes: 2,
#                                              C: 0.01,
                                              irange: .005 },
                        'c2': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin2y',
                                              n_classes: 2,
#                                              C: 0.01,
                                              irange: .005 },
                        'c4': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin4y',
                                              n_classes: 2,
 #                                             C: 0.01,
                                              irange: .005 },
                        'c6': !obj:pylearn2.models.mlp.Softmax {
                                              max_col_norm: 1.9365,
                                              layer_name: 'nin4y',
                                              n_classes: 2,
 #                                             C: 0.01,
                                              irange: .005 },

            },
            companion_weight: {'c0': 0.1, 'c2': 0.1,
                               'c4': 0.2, 'c6': 0.2},
         },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 300,
            new_epochs: True
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                channel_name: 'valid_y_misclass',
                save_path: "./models/AFW_softmax_64_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
             start: 30,
             saturate: 100,
             decay_factor: 0.01
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 5,
            saturate: 100,
            final_momentum: .9
        }
    ],
    save_path: "./models/AFW_softmax_64.pkl",
    save_freq: 5
}
