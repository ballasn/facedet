!obj:pylearn2.train.Train {
    dataset: &train !obj:datasets.faceDataset.faceDataset {
        which_set: 'train',
        ratio: 0.9,
        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
        #negative_samples: "/data/lisatmp3/chassang/facedet/16/neg100_good_shuffled.npy",
        mean: '/data/lisatmp3/ballasn/facedet/datasets/aflw/mean_16pascal.npy',
        resize_neg: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
                layers: [
                 ### Inception Modules
                 !obj:pylearn2.models.mlp.CompositeLayer {
                     layer_name: 'in1',
                     layers: [
                          ### 1x1 Conv + 3x3 Conv
                          !obj:models.layer.corrVariable.CorrMMElemwise {
                                  layer_name: 'c1',
                                  output_channels: 96,
                                  pad: [1, 1],
                                  kernel_shape: [3, 3],
                                  irange: .005,
                                  max_kernel_norm: .9,
                                  nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                             },
                             !obj:models.layer.corrVariable.CorrMMElemwise {
                                 layer_name: 'c2',
                                 output_channels: 32,
                                 pad: [2, 2],
                                 kernel_shape: [5, 5],
                                 irange: .005,
                                 max_kernel_norm: .9,
                                 nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                tied_b: 1
                             },
                           ### 3x3 Max Pool + 1x1 Conv
                          !obj:models.layer.layerlist.LayerList {
                             layer_name: 'c3_1',
                             layers: [
                                !obj:models.layer.poolUnit.PoolUnit {
                                  layer_name: 'in1_c3',
                                  pool_type: 'max',
                                  pool_shape: [3,3],
                                  pool_stride: [3,3],
                                },
                                !obj:models.layer.corrVariable.CorrMMElemwise {
                                  layer_name: 'c3_2',
                                  output_channels: 96,
                                  pad: [5,5],
                                  kernel_shape: [1, 1],
                                  irange: .005,
                                  max_kernel_norm: .9,
                                  nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                             },
                            ], },
                ],},
                 !obj:models.layer.mergeComposite.MergeComposite {
                     layer_name: 'in1_merge'
                 },
                 ### Inception Modules
                 !obj:pylearn2.models.mlp.CompositeLayer {
                     layer_name: 'in2',
                     layers: [

                         ###  1x1 Conv
                         !obj:models.layer.convVariable.ConvElemwise {
                             layer_name: 'c0',
                             output_channels: 32,
                             kernel_shape: [1, 1],
                             irange: .05,
                             max_kernel_norm: .9,
                             nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                             tied_b: 1
                         },
                         ### 1x1 Conv + 3x3 Conv
                          !obj:models.layer.layerlist.LayerList {
                             layer_name: 'c1',
                             layers: [
                                !obj:models.layer.convVariable.ConvElemwise {
                                 layer_name: 'c1_1',
                                 output_channels: 64,
                                 kernel_shape: [1, 1],
                                 irange: .05,
                                 max_kernel_norm: .9,
                                 nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                                },
                                !obj:models.layer.corrVariable.CorrMMElemwise {
                                  layer_name: 'c1_2',
                                  output_channels: 96,
                                  pad: [1, 1],
                                  kernel_shape: [3, 3],
                                  irange: .05,
                                  max_kernel_norm: .9,
                                  nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                             },
                            ], },
                          ### 1x1 Conv + 5x5 Conv
                          !obj:models.layer.layerlist.LayerList {
                             layer_name: 'c2',
                             layers: [
                                !obj:models.layer.convVariable.ConvElemwise {
                                 layer_name: 'c2_1',
                                 output_channels: 16,
                                 kernel_shape: [1, 1],
                                 irange: .05,
                                 max_kernel_norm: .9,
                                 nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                                },
                                !obj:models.layer.corrVariable.CorrMMElemwise {
                                  layer_name: 'c2_2',
                                  output_channels: 32,
                                  pad: [2, 2],
                                  kernel_shape: [5, 5],
                                  irange: .05,
                                  max_kernel_norm: .9,
                                  nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                             },
                            ], },
                           ### 3x3 Max Pool + 1x1 Conv
                          !obj:models.layer.layerlist.LayerList {
                             layer_name: 'c3',
                             layers: [
                                !obj:models.layer.poolUnit.PoolUnit {
                                  layer_name: 'c3_1',
                                  pool_type: 'max',
                                  pool_shape: [3,3],
                                  pool_stride: [3,3],
                                },
                                !obj:models.layer.corrVariable.CorrMMElemwise {
                                  layer_name: 'c3_2',
                                  output_channels: 96,
                                  pad: [5,5],
                                  kernel_shape: [1, 1],
                                  irange: .05,
                                  max_kernel_norm: .9,
                                  nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                                 tied_b: 1
                             },
                            ], },
                ],},
                 !obj:models.layer.mergeComposite.MergeComposite {
                     layer_name: 'in2_merge'
                 },
                 !obj:models.layer.convVariable.ConvElemwise {
                     layer_name: 'Sw',
                     output_channels: 2,
                     kernel_shape: [16, 16],
                     irange: .5,
                     max_kernel_norm: 1.9,
                     nonlinearity: !obj:pylearn2.models.mlp.RectifierConvNonlinearity {},
                     tied_b: 1
                 },
                 !obj:models.layer.SoftmaxBC01Extended.SoftmaxExtended {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 2,
                     irange: .5,
                     thresholds: [0.25, 0.4]
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [16, 16],
            num_channels: 3,
            axes: ['b', 'c', 0, 1],
           },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .001,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.1,
        },
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:datasets.faceDataset.faceDataset {
                        which_set: 'valid',
                        ratio: 0.9,
                        positive_samples: "/data/lisatmp3/ballasn/facedet/datasets/aflw/feats16.npy",
                        negative_samples: "/data/lisatmp3/ballasn/facedet/datasets/pascal/neg100000_16.npy",
                        mean: '/data/lisatmp3/ballasn/facedet/datasets/aflw/mean_16pascal.npy',
                      },
            },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 1000,
            new_epochs: True
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
                channel_name: 'valid_y_misclass',
                save_path: "./models/inception_best_2.pkl"
            }
    ],
    save_path: "./models/16_inception_2.pkl",
    save_freq: 5
}
