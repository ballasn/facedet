 !obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1,
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
                layers: [
                
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                 layer_name: C1,
                 num_channels: 500,
                 kernel_shape: [5, 5],
                 num_pieces: 2,
                 pool_shape: [2, 2],
                 pool_stride: [1, 1],
                 irange: .005,
                 max_kernel_norm: 1.900000,
                 tied_b: 1
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                 layer_name: C2,
                 num_channels: 500,
                 kernel_shape: [5, 5],
                 num_pieces: 2,
                 pool_shape: [2, 2],
                 pool_stride: [1, 1],
                 irange: .005,
                 max_kernel_norm: 1.900000,
                 tied_b: 1
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                 layer_name: C3,
                 num_channels: 500,
                 kernel_shape: [5, 5],
                 num_pieces: 2,
                 pool_shape: [2, 2],
                 pool_stride: [1, 1],
                 irange: .005,
                 max_kernel_norm: 1.900000,
                 tied_b: 1
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                 layer_name: C4,
                 num_channels: 500,
                 kernel_shape: [5, 5],
                 num_pieces: 2,
                 pool_shape: [2, 2],
                 pool_stride: [1, 1],
                 irange: .005,
                 max_kernel_norm: 1.900000,
                 tied_b: 1
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     istdev: .05
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [28, 28],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .01,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train': *train,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              one_hot: 1,
                              start: 50000,
                              stop:  60000
                          },
                'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'test',
                              one_hot: 1,
                              stop: 10000
                          }
            },
        #cost: !obj:utils.compression.TeacherRegressionCost.TeacherRegressionCost { 
         #  teacher_path: teacher_best.pkl,
         #  relaxation_term: 3
        #},
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:utils.compression.TeacherRegressionCost.TeacherRegressionCost {
                teacher_path: teacher_best.pkl,
                relaxation_term: 1
            },
            !obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: [ .00005, .00005, .00005, .00005, .00005 ]
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.50,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 100
                },
            ]
        },
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "./student_best.pkl"
        }, !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}